<root BTCPP_format="4">
    <TreeNodesModel>
        <Action ID="ArriveGoal">
            <input_port name="tolerance_d" type="double">less than the value,it arrvied</input_port>
            <input_port name="velocity" type="BT::Position3D">This is expect speed</input_port>
            <input_port name="acc" type="BT::Position3D">This is expect accelerate</input_port>
            <input_port name="ctrl_type" type="int">0:PosCtrl,1:Velocity,2:Acc,3:Planner</input_port>
            <input_port name="goal" type="BT::Position3D">drone fly to goal</input_port>
        </Action>
        <Action ID="CalObjPos">
            <input_port name="class_name" type="BT::AnyTypeAllowed">we need to set object name</input_port>
        </Action>
        <Action ID="CrossFrame">
            <input_port name="ctrl_speed" type="BT::AnyTypeAllowed">set corss frame speed</input_port>
            <input_port name="ctrl_type" type="BT::AnyTypeAllowed">0: just use Visual servo; 1: use planner</input_port>
            <input_port name="object_name" type="BT::AnyTypeAllowed">we need cross frame name</input_port>
        </Action>
        <Action ID="DetectObj">
            <input_port name="stop_detect" type="bool"/>
            <output_port name="stop_hover" type="bool"/>
            <input_port name="class_name" type="BT::AnyTypeAllowed">input class name</input_port>
        </Action>
        <Action ID="GoalYaw">
            <input_port name="yaw_rate" type="BT::AnyTypeAllowed">use we want yaw_rate</input_port>
            <input_port name="is_set_point" type="BT::AnyTypeAllowed">if we want set point</input_port>
            <input_port name="point" type="BT::AnyTypeAllowed">set we need point,but the is_set_point is true</input_port>
            <input_port name="goal_yaw" type="BT::AnyTypeAllowed">we need to control the fcu yaw</input_port>
        </Action>
        <Action ID="Hit">
            <input_port name="right_line" type="BT::AnyTypeAllowed">no discript</input_port>
            <input_port name="left_line" type="BT::AnyTypeAllowed">no discript</input_port>
            <input_port name="needle_ang_adapt" type="BT::AnyTypeAllowed">the value to adapt the needle fixed angle</input_port>
            <input_port name="goal_tolerance" type="BT::AnyTypeAllowed">the value greate than obj_inflate ande less than his_dist</input_port>
            <input_port name="yaw_err" type="BT::AnyTypeAllowed">when the object's yaw subtract fcu's yaw lees than value ,considered equ</input_port>
            <input_port name="hit_dist" type="BT::AnyTypeAllowed">when the to object distane less the value</input_port>
            <input_port name="method" type="BT::AnyTypeAllowed">hit object method,direct or other</input_port>
            <input_port name="object_name" type="BT::AnyTypeAllowed">input hitted object</input_port>
        </Action>
        <Action ID="HitDirect">
            <input_port name="right_line" type="BT::AnyTypeAllowed">no discript</input_port>
            <input_port name="left_line" type="BT::AnyTypeAllowed">no discript</input_port>
            <input_port name="needle_ang_adapt" type="BT::AnyTypeAllowed">the value to adapt the needle fixed angle</input_port>
            <input_port name="goal_tolerance" type="BT::AnyTypeAllowed">the value greate than obj_inflate ande less than his_dist</input_port>
            <input_port name="yaw_err" type="BT::AnyTypeAllowed">when the object's yaw subtract fcu's yaw lees than value ,considered equ</input_port>
            <input_port name="hit_dist" type="BT::AnyTypeAllowed">when the to object distane less the value</input_port>
            <input_port name="method" type="BT::AnyTypeAllowed">hit object method,direct or other</input_port>
            <input_port name="object_name" type="BT::AnyTypeAllowed">input hitted object</input_port>
        </Action>
        <Action ID="Hover">
            <input_port name="is_time_ctrl" type="double">keep hover time</input_port>
            <input_port name="hover_is_end" type="bool">if exit current node,be set ture</input_port>
            <input_port name="stop_hover" type="bool">emit hover event</input_port>
        </Action>
        <Action ID="Land">
            <input_port name="speed_z" type="BT::AnyTypeAllowed">land speed</input_port>
            <input_port name="use_speed" type="BT::AnyTypeAllowed">Land ... You can use the speed to control, or use AUTO.LAND mode</input_port>
        </Action>
        <Condition ID="MatchCtrlChoose">
            <input_port name="expected_value" type="int"/>
            <input_port name="config_param" type="int"/>
        </Condition>
        <Action ID="PlanNode">
            <input_port name="enabel_yaw_rate" type="BT::AnyTypeAllowed">use trajecotry yaw_rate</input_port>
            <input_port name="enabel_yaw" type="BT::AnyTypeAllowed">use trajectory yaw</input_port>
            <input_port name="planner_ctrl_type" type="BT::AnyTypeAllowed">choose the control type,0:pose,1:volicty,2:accelerate</input_port>
            <input_port name="enabel_planner" type="BT::AnyTypeAllowed">open or close planner</input_port>
            <input_port name="goal_ori" type="BT::AnyTypeAllowed">the goal orientation, [roll, pitch, yaw]</input_port>
            <input_port name="goal_src" type="BT::AnyTypeAllowed">0: xml set; 1:program inner;3: rviz</input_port>
            <input_port name="goal_position" type="BT::AnyTypeAllowed">the goal position</input_port>
        </Action>
        <Action ID="PlanNodeRviz">
            <input_port name="planner_ctrl_type" type="BT::AnyTypeAllowed">choose the control type,0:pose,1:volicty,2:accelerate</input_port>
            <input_port name="enable_planner" type="BT::AnyTypeAllowed">open or close planner</input_port>
        </Action>
        <Action ID="PrintVector">
            <input_port name="value" type="Vector4D"/>
        </Action>
        <Action ID="SerchObj">
            <input_port name="class_id" type="int">need tu find object</input_port>
        </Action>
        <Action ID="Takeoff">
            <input_port name="is_rc" type="BT::AnyTypeAllowed">is remote controller operator</input_port>
            <input_port name="goal" type="BT::Position3D">Takeoff position ... </input_port>
        </Action>
    </TreeNodesModel>
</root>
